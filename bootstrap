#!/bin/bash

#%
#% bootstrap - pull, build and install dekaf2
#%
#% usage: bootstrap [<options>] go
#%
#% with <options>:
#%
#%   -with-debug : will install both debug and release versions
#%   -scratch    : clear build directory before building
#%   -no-pull    : do not pull the latest sources before building
#%   -no-setup   : do not install helper packages/libs
#%   -no-klog    : configure release build without klog
#%   -lto        : force link time optimization for release builds
#%   -j N        : build with N processes in parallel
#%                 (default is number of cpu cores)
#%
#% The build directory will be a subdirectory 'build/Release|Debug|Xcode'
#% of the directory in which this script is located.
#%

# are we in test mode?
if [ "$1" = "-x" ]; then
	set -x
	shift
fi # end check test mode

setx=Install
#==================
Install ()
#==================
{
	BuildType="$1"

	cd ${BuildType} || Die "Cannot cd into build directory ${BuildType}"

	# install

	Info "now installing dekaf2 ${BuildType} project (may need root password)"
	sudo cmake --build . --target install --config ${BuildType} | grep -v "Up-to-date"

	Info "dekaf2 ${BuildType} build successfully installed"

	cd ..

} # Install

setx=Build
#==================
Build ()
#==================
{
	BuildType="$1"

	cd ${BuildType} || Die "Cannot cd into build directory ${BuildType}"

	# build

	Info "now building dekaf2 ${BuildType} project with ${CPUCORES} processes"
	cmake --build . --parallel ${CPUCORES} --target all --config ${BuildType} || Die "Cannot build ${BuildType} project"

	cd ..

} # Build

setx=Configure
#==================
Configure ()
#==================
{
	BuildType="$1"
	shift
	AdditionalParameters=$*

	cd ${BuildType} || Die "Cannot cd into build directory ${BuildType}"

	# configure CMake

	Info "${SETMODERNCC} cmake -DCMAKE_BUILD_TYPE=${BuildType} ${AdditionalParameters} ${ME_ONLYPATH}"

	${SETMODERNCC} cmake -DCMAKE_BUILD_TYPE=${BuildType} ${AdditionalParameters} "${ME_ONLYPATH}" || Die "Cannot configure CMake project"

	cd ..

} # Configure

setx=ConfigureXcode
#==================
ConfigureXcode ()
#==================
{
    BuildType="Xcode"

    cd ${BuildType} || Die "Cannot cd into build directory ${BuildType}"

    # configure CMake

    cmake -G Xcode "${ME_ONLYPATH}" || Die "Cannot configure CMake project"

    cd ..

} # ConfigureXcode

setx=Setup
#==================
Setup ()
#==================
{

	cd "${ME_ONLYPATH}"  || Die "Cannot cd into source directory ${ME_ONLYPATH}"

	[[ ! -z "${bScratch}" ]] && rm -rf "${BuildDir}" \
		&& Info "removed build directory ${BuildDir}" \
		|| Die "failed to remove build directory ${BuildDir}"

	if [[ -d "${BuildDir}" ]]; then

		Info "Build directory ${BuildDir} already setup."
		Info "Remove it before calling ${ME} to have a fresh build from scratch."

	else

		# create a pristine build directory

		mkdir "${BuildDir}" || Die "Cannot create build directory ${BuildDir}"

	fi

	if [[ -z "${bNoPull}" ]]; then
		Info "Checking for updates.."
		git pull         || Die "Cannot pull source code changes"
	fi

	cd "${BuildDir}"     || Die "Cannot cd into build directory ${BuildDir}"

	mkdir -p "Debug"     || Die "Cannot create Debug build directory"
	mkdir -p "Release"   || Die "Cannot create Release build directory"

	[[ ! -z "${bWithDebug}" ]] && Configure "Debug"
	Configure "Release" ${sAdditionalOptions}

    if [[ "${OS}" == "Darwin" ]]; then
        mkdir -p "Xcode" || Die "Cannot create Xcode build directory"
        ConfigureXcode
    fi

	[[ ! -z "${bWithDebug}" ]] && Build "Debug"
	Build "Release"

	[[ ! -z "${bWithDebug}" ]] && Install "Debug"
	Install "Release"

} # Setup


#==================
setx=Main_Body
#==================

IMAYBE="${BASH_SOURCE:-$0}"
ME=$(basename "${IMAYBE}")
ME_ONLYPATH="$(cd $(dirname ${IMAYBE}) && pwd)"
ME_FULLPATH="$ME_ONLYPATH/$ME"
ScriptLib="${ME_ONLYPATH}/scripts/scriptlib"
BuildSetup="${ME_ONLYPATH}/scripts/buildsetup"
BuildDir="${ME_ONLYPATH}/build"

[[ ! -f "${ScriptLib}" ]] && Die "Cannot check OS version, script '${ScriptLib}' not found"

source ${ScriptLib}

SetupColors
GetOS

case $(uname) in
Linux)
	CPUCORES=$(grep -E '^vendor_id' /proc/cpuinfo | wc -l)
	[[ $CPUCORES -eq 0 ]] && CPUCORES=$(grep -E '^processor' /proc/cpuinfo | wc -l)
	;;
Darwin)
	CPUCORES=$(expr $(sysctl -n hw.logicalcpu) / 1)
	;;
esac

# read arguments
while [[ $# -gt 0 ]]
do
	case "$1" in
	-help|--help|-h)
		Synopsis
		;;
	-with-debug|--with-debug)
		bWithDebug="1"
		;;
	-scratch|--scratch)
		bScratch="1"
		;;
	-nopull|-no-pull|--no-pull)
		bNoPull="1"
		;;
	-nosetup|-no-setup|--no-setup)
		bNoSetup="1"
		;;
	-no-klog|--no-klog)
		sAdditionalOptions="${sAdditionalOptions} -DDEKAF2_WITH_KLOG=OFF"
		;;
	-lto|--lto)
		sAdditionalOptions="${sAdditionalOptions} -DDEKAF2_LINK_TIME_OPTIMIZATION=ON"
		;;
	-j)
		shift
		CPUCORES=$1
		;;
	-go|--go|go)
		bGo="1"
		;;
	*)
		Die "unknown option: '$1' -- try ${IMAYBE} -help"
		exit 1
		;;
	esac
	shift
done

[[ -z "${bGo}" ]] && Synopsis

[[ $CPUCORES -eq 0 ]] && CPUCORES=4

if [[ -z "${bNoSetup}" ]]; then
	[[ ! -f "${BuildSetup}" ]] && Die "Cannot setup build, script '${BuildSetup}' not found"
	"${BuildSetup}" -go || Die "could not configure target machine"
fi

Setup

Info "dekaf2 successfully installed!"
