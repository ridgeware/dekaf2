# dekaf2-config.cmake - package configuration file

cmake_policy(PUSH)

if (CMAKE_VERSION VERSION_GREATER_EQUAL 3.27.0)
	# allow mixed case find_package names (Boost needs this with cmake 3.27)
	cmake_policy(SET CMP0144 OLD)
endif()

if (CMAKE_VERSION VERSION_GREATER_EQUAL 3.30.0)
	# use boosts own BoostConfig.cmake
	cmake_policy(SET CMP0167 OLD)
endif()

include(CMakeFindDependencyMacro)

# the required dependencies
find_dependency(Threads)
find_dependency(OpenSSL)
set(Boost_NO_WARN_NEW_VERSIONS ON)
find_dependency(Boost)
find_dependency(yaml-cpp)

cmake_policy(POP)

if (@DEKAF2_DUAL_TARGET@) # DEKAF2_DUAL_TARGET
	# we only support the Release and Debug output locations - other
	# build types have to pick either or
	if (CMAKE_BUILD_TYPE STREQUAL "Debug"
	 OR CMAKE_BUILD_TYPE STREQUAL "debug")
		set(LIB_BUILD_TYPE_PATH "/../Debug/cmake")
	elseif (NOT CMAKE_BUILD_TYPE AND NOT "@CMAKE_BUILD_TYPE@" STREQUAL "")
		set(LIB_BUILD_TYPE_PATH "/../@CMAKE_BUILD_TYPE@/cmake")
	else()
		set(LIB_BUILD_TYPE_PATH "/../Release/cmake")
	endif()
else() # DEKAF2_DUAL_TARGET
	# simply leave the output path empty when we output only to one target location
	# (we are already inside the lib/dekaf2/cmake directory..)
	set(LIB_BUILD_TYPE_PATH)
endif() # DEKAF2_DUAL_TARGET

get_filename_component(SELF_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
include("${SELF_DIR}${LIB_BUILD_TYPE_PATH}/dekaf2-targets.cmake")
include("${SELF_DIR}${LIB_BUILD_TYPE_PATH}/dekaf2-setup.cmake")
