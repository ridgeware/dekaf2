# dekaf2-setup.cmake - forwards library setup to includers (and is also used by dekaf2 itself)

if (NOT DEKAF2_HAVE_INCLUDED_SETUP)

	if (CMAKE_VERSION VERSION_GREATER_EQUAL 3.30.0)
		# use boosts own BoostConfig.cmake
		cmake_policy(SET CMP0167 OLD)
	endif()

	# avoid repeated includes
	set (DEKAF2_HAVE_INCLUDED_SETUP ON)

	if (NOT "${CMAKE_CXX_COMPILER_ID}" STREQUAL "@CMAKE_CXX_COMPILER_ID@")
		message(STATUS "warning: dekaf2 was compiled with @CMAKE_CXX_COMPILER_ID@ but is linked against code compiled with ${CMAKE_CXX_COMPILER_ID}")
	endif()

	# ============================= BUILD FLAGS =================================

	# the cmake logic is sometimes case sensitive..
	if (CMAKE_BUILD_TYPE STREQUAL "release" OR CMAKE_BUILD_TYPE STREQUAL "RELEASE")
		set(CMAKE_BUILD_TYPE "Release")
	elseif (CMAKE_BUILD_TYPE STREQUAL "debug" OR CMAKE_BUILD_TYPE STREQUAL "DEBUG")
		set(CMAKE_BUILD_TYPE "Debug")
	endif()

	if (CMAKE_BUILD_TYPE)
		message (STATUS "Build type: ${CMAKE_BUILD_TYPE}")
	endif()

	if (DEKAF2_INHERIT_BUILD_FLAGS)

		set (DEKAF2_CXX_STANDARD "@DEKAF2_CXX_STANDARD@")
		set (CMAKE_CXX_STANDARD ${DEKAF2_CXX_STANDARD})
		set (CPU_x86 "@CPU_x86@")
		set (CPU_ARM "@CPU_ARM@")
		set (IS_MACOS "@IS_MACOS@")
		set (IS_WINDOWS "@IS_WINDOWS@")
		set (IS_LINUX "@IS_LINUX@")
		set (DEKAF2_HAS_SQLITE3 "@DEKAF2_HAS_SQLITE3@")
		set (DEKAF2_BUILD_TYPE "@CMAKE_BUILD_TYPE@")
		set (DEKAF2_OUTPUT_TARGET "@DEKAF2_OUTPUT_TARGET@")
		set (DEKAF2_DUAL_TARGET "@DEKAF2_DUAL_TARGET@")
		set (DEKAF2_VERSION_IN_TARGET "@DEKAF2_VERSION_IN_TARGET@")

		if (@DEKAF2_BUILD_SHARED_DEKAF2@)
			set (DEKAF2_LINK_SHARED "-shared")
		else()
			set (DEKAF2_LINK_SHARED)
		endif()

		# ================================ CMAKE INTERNALS =================================

		if (IS_MACOS)

			SET(CMAKE_C_ARCHIVE_CREATE   "<CMAKE_AR> Scr <TARGET> <LINK_FLAGS> <OBJECTS>")
			SET(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_AR> Scr <TARGET> <LINK_FLAGS> <OBJECTS>")
			SET(CMAKE_C_ARCHIVE_FINISH   "<CMAKE_RANLIB> -no_warning_for_no_symbols -c <TARGET>")
			SET(CMAKE_CXX_ARCHIVE_FINISH "<CMAKE_RANLIB> -no_warning_for_no_symbols -c <TARGET>")

			# variants only appeared in v10.14 of the MACOS SDK - but we use those from boost anyway
			#set(CMAKE_OSX_DEPLOYMENT_TARGET "10.14")

		endif()

		# ================================ ASAN / UBSAN =================================

		if (CMAKE_GENERATOR STREQUAL "Xcode")
			if ("@DEKAF2_ENABLE_DEBUG_RUNTIME_CHECKS_IN_XCODE@" STREQUAL "ON")
				message(STATUS "enabling ASAN/UBSAN runtime checks for Xcode")
				set(CMAKE_XCODE_GENERATE_SCHEME ON)
				set(CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER ON)
				set(CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN ON)
				set(CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER ON)
			endif()
		else()
			if (NOT MSVC)
				if ("@DEKAF2_ENABLE_DEBUG_RUNTIME_CHECKS@" STREQUAL "ON")
					message(STATUS "enabling ASAN/UBSAN runtime checks for debug builds")
					add_compile_options("$<$<CONFIG:DEBUG>:-fsanitize=address;-fsanitize=undefined;-fsanitize-address-use-after-scope;-fstack-protector-strong>")
					add_link_options("$<$<CONFIG:DEBUG>:-fsanitize=address;-fsanitize=undefined;-fsanitize-address-use-after-scope;-fstack-protector-strong>")
				endif()
			endif()
		endif()

		# ================================= BOOST ====================================

		# only search for boost if not already done (probably with different config options)

		if (NOT Boost_FOUND)

			if (CMAKE_VERSION VERSION_GREATER_EQUAL 3.27.0)
				# allow mixed case find_package names
				cmake_policy(SET CMP0144 OLD)
			endif()

			# we only need to find boost to check its version, as we have to switch
			# inline symbol visibility off if version is >= 1.69

			set(Boost_USE_STATIC_LIBS ON)
			set(Boost_USE_MULTITHREADED ON)
			# to workaround a broken boost cmake config with boost 1.71 disable
			# the boost cmake files
			set(Boost_NO_BOOST_CMAKE 1)

			if (NOT BOOST_ROOT)
				# only set BOOST_ROOT if not already done by caller
				if (IS_WINDOWS)
					set(BOOST_ROOT "C:\\boost")
				else()
					# we prefer the boost lib that we installed ourselves in /opt/lib ..
					set(BOOST_ROOT "/opt/boost")
				endif()
			endif ()

			# most annoying warning ever - finally we can suppress it (cmake 3.20++)
			set(Boost_NO_WARN_NEW_VERSIONS ON)

			find_package(Boost 1.54 COMPONENTS system REQUIRED)

		endif()

		# ============================= COMPILER FLAGS =================================

		if (NOT MSVC)

			### add the compile target ('build identity') RelWithLabels, which builds optimized,
			### but includes minimal labels

			set (CMAKE_CXX_FLAGS_RELWITHLABELS "-O3 -g1 -DNDEBUG" CACHE STRING
				"C++ options to build optimized, but with minimal labels included" FORCE)
			set (CMAKE_C_FLAGS_RELWITHLABELS "-O3 -g1 -DNDEBUG" CACHE STRING
				"C options to build optimized, but with minimal labels included" FORCE)
			set (CMAKE_EXE_LINKER_FLAGS_RELWITHLABELS "-feliminate-unused-debug-symbols" CACHE STRING
				"Linker options to build optimized, but with minimal labels included" FORCE)
			set (CMAKE_SHARED_LINKER_FLAGS_RELWITHLABELS "-feliminate-unused-debug-symbols" CACHE STRING
				"Shared linker options to build optimized, but with minimal labels included" FORCE)

			MARK_AS_ADVANCED(
				CMAKE_CXX_FLAGS_RELWITHLABELS
				CMAKE_C_FLAGS_RELWITHLABELS
				CMAKE_EXE_LINKER_FLAGS_RELWITHLABELS
				CMAKE_SHARED_LINKER_FLAGS_RELWITHLABELS
			)

			# alias for verbose build type
			if (CMAKE_BUILD_TYPE STREQUAL "O3G1")
				set (CMAKE_BUILD_TYPE "RelWithLabels")
			endif()

			### add compile options common to GCC and Clang ###

#			# eliminate unused debug symbols from final products
#			set (CMAKE_EXE_LINKER_FLAGS_RELEASE    "${CMAKE_EXE_LINKER_FLAGS_RELEASE} -feliminate-unused-debug-symbols"    )
#			set (CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} -feliminate-unused-debug-symbols" )

			include(CheckCXXCompilerFlag)
			set(CMAKE_REQUIRED_QUIET TRUE)
			check_cxx_compiler_flag(-Wpessimizing-move              DEKAF2_HAS_WARN_PESSIMIZING_MOVE   )
			check_cxx_compiler_flag(-Wno-deprecated-copy            DEKAF2_HAS_WARN_NO_DEPRECATED_COPY )
			if (NOT DEKAF2_HAS_WARN_ARRAY_BOUNDS)
				check_cxx_compiler_flag(-Warray-bounds              DEKAF2_HAS_WARN_ARRAY_BOUNDS       )
			endif()
			check_cxx_compiler_flag(-fconstexpr-ops-limit=400000000 DEKAF2_HAS_CONSTEXPR_OPS_LIMIT     )
			check_cxx_compiler_flag(-fconstexpr-steps=400000000     DEKAF2_HAS_CONSTEXPR_STEPS         )
			check_cxx_compiler_flag(-fconstexpr-depth=2048          DEKAF2_HAS_CONSTEXPR_DEPTH         )

			add_compile_options(-Wall -Wextra -Wno-unused-parameter)
			add_compile_options($<$<CONFIG:DEBUG>:-Werror>)

			if (DEKAF2_HAS_WARN_PESSIMIZING_MOVE)
				add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-Wpessimizing-move>)
			endif()

			if (DEKAF2_HAS_WARN_NO_DEPRECATED_COPY AND NOT (CMAKE_COMPILER_IS_GNUCXX AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 8))
				# adding -Wno-deprecated-copy for boost-1.78 on Apple clang 13.1.6 (ARM64)
				add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-Wno-deprecated-copy>)
			endif()

			if (Boost_VERSION VERSION_GREATER_EQUAL "1.69.00")
				# satisfy new build mode of boost-1.69
				add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fvisibility-inlines-hidden>)
			endif()
			add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fvisibility=hidden>)

		endif()

		if (CMAKE_COMPILER_IS_GNUCXX)

			if (DEKAF2_HAS_WARN_ARRAY_BOUNDS AND CMAKE_CXX_STANDARD LESS 17)
				# gcc has an overzealous array bounds check that triggers with no reason
				# when we use our own string_view on remove_prefix()
				# (which we do with C++ < 17)
				# unfortunately it seems to be impossible to switch this check
				# off for the call place, therefore we do it for all (as this is
				# only one build configuration any other ones will still check
				# for array bounds)
				add_compile_options(-Wno-array-bounds)
			endif()

			if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 12.0)
				# gcc 12.1 in -O2/3 at least on AARCH64 warns all over the place for overlapping memcpy.. so for
				# now switch this warning off
				add_compile_options(-Wno-restrict)
			endif()

			if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 13)
				# gcc 13 switch concepts diagnostics on
				add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fconcepts-diagnostics-depth=3>)
			endif()

			if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 6.0) # AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.2) : gcc 8.3 warns again..
				# mute the annoying warning on changing abi with gcc 7.1
				add_compile_options(-Wno-psabi)
			endif()

			if (DEKAF2_HAS_CONSTEXPR_OPS_LIMIT)
				add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fconstexpr-ops-limit=400000000>)
			endif()
			if (DEKAF2_HAS_CONSTEXPR_DEPTH)
				# increase amount of permitted constexpr depth (default is 512)
				add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fconstexpr-depth=2048>)
			endif()

		elseif (CMAKE_CXX_COMPILER_ID MATCHES "Clang")

			if (DEKAF2_HAS_CONSTEXPR_STEPS)
				# increase amount of permitted constexpr steps (default is around 1.000.000)
				add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fconstexpr-steps=400000000>)
			endif()
			if (DEKAF2_HAS_CONSTEXPR_DEPTH)
				# increase amount of permitted constexpr depth (default is 512)
				add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fconstexpr-depth=2048>)
			endif()

			# linux clang is way too picky at warnings, but it does not matter to disable
			# this on MacOS too
			add_compile_options(-Wno-mismatched-tags)

			# apple clang apparently has this now in one of the warning setups - not good
			add_compile_options(-Wno-range-loop-analysis)

			if (NOT IS_MACOS)
				# this warning is unknown for AppleClang, and clang < 4
				if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 4)
					add_compile_options(-Wno-return-std-move)
				endif()
			endif()

		elseif (MSVC)

			# make sure MSVC adds a proper __cplusplus define that announces more than C++98
			# (starting with VS2017)
			add_compile_options(/Zc:__cplusplus)
			# ignore warnings about empty object files
			add_link_options(/ignore:4221)
			# make sure MSVC does not complain about a missing windows target definition
			# we now need at least Vista (0x0600) for inet_pton..
			add_compile_definitions(_WIN32_WINNT=0x0600)
			# silence the allocator warning for boost::asio
			add_compile_definitions(_SILENCE_CXX17_ALLOCATOR_VOID_DEPRECATION_WARNING)
			# silence uncaught_exception warning
			add_compile_definitions(_SILENCE_CXX17_UNCAUGHT_EXCEPTION_DEPRECATION_WARNING)
			# get rid of min/max macros, and force unicode
			add_compile_definitions(UNICODE _UNICODE STRICT NOMINMAX)
			# silence warnings about some C string functions and other "unsafe" functions
			add_compile_definitions(_CRT_SECURE_NO_WARNINGS _SCL_SECURE_NO_WARNINGS)

			# increase amount of permitted constexpr steps (default is 100.000)
			add_compile_options(/constexpr:steps 400000000)
			# increase amount of permitted constexpr depth (default is 512)
			add_compile_options(/constexpr:depth 2048)

			# switch most warnings on
			#add_compile_options(/W4)

		else ()

			message (STATUS "compiler type not detected, using default opions")

		endif ()

		# C++11 std::threads do not need this
		set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
		set(THREADS_PREFER_PTHREAD_FLAG TRUE)
		find_package(Threads REQUIRED QUIET)

	else()

		# even if not inheriting the rest of the build flags we must make sure that the linker
		# binds ASAN/UBSAN libs if dekaf2 was built against them

		if (CMAKE_GENERATOR STREQUAL "Xcode")
			if ("@DEKAF2_ENABLE_DEBUG_RUNTIME_CHECKS_IN_XCODE@" STREQUAL "ON")
				# don't know how to selectively adding ASAN/UBSAN to linker settings in old cmakes,
				# therefore adding it to the compile stage as well
				message(STATUS "enabling ASAN/UBSAN runtime checks for Xcode")
				set(CMAKE_XCODE_GENERATE_SCHEME ON)
				set(CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER ON)
				set(CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN ON)
				set(CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER ON)
			endif()
		else()
			if (NOT MSVC)
				if ("@DEKAF2_ENABLE_DEBUG_RUNTIME_CHECKS@" STREQUAL "ON")
					if(NOT CMAKE_VERSION VERSION_LESS "3.13.0")
						add_link_options("$<$<CONFIG:DEBUG>:-fsanitize=address;-fsanitize=undefined;-fsanitize-address-use-after-scope;-fstack-protector-strong;-fstack-check>")
					else()
						# don't know how to selectively add ASAN/UBSAN to linker settings in old cmakes,
						# therefore adding it to the compile stage as well
						message(STATUS "enabling ASAN/UBSAN runtime checks for debug builds")
						set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address -fsanitize=undefined -fsanitize-address-use-after-scope -fstack-protector-strong")
					endif()
				endif()
			endif()
		endif()

	endif()

	if ("@DEKAF2_LINK_TIME_OPTIMIZATION@" STREQUAL "ON")
		# enable function and data splitting into different sections for release builds
		if ((CMAKE_COMPILER_IS_GNUCXX AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 11)
			OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
			# -flto forces the compiler to dump object files in the internal GIMPL format,
			# which in turn enables any linker to do
			#   a) link time optimization and
			#   b) drop sections not linked into the final executable
			message(STATUS "forcing link time optimization for release builds")
			add_compile_options($<$<CONFIG:RELEASE>:-flto>)
			add_compile_options($<$<CONFIG:RELWITHLABELS>:-flto>)
			if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
				# gcc recognizes the lto format automatically, clang needs a little help
				add_link_options($<$<CONFIG:RELEASE>:-flto>)
				add_link_options($<$<CONFIG:RELWITHLABELS>:-flto>)
			endif()
		elseif (CMAKE_COMPILER_IS_GNUCXX AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 6)
			# this is the older way of achieving one section per function, without link
			# time optimization except removing unused sections/functions
			message(STATUS "forcing split function and data sections for release builds")
			add_compile_options($<$<CONFIG:RELEASE>:-fdata-sections>)
			add_compile_options($<$<CONFIG:RELEASE>:-ffunction-sections>)
			add_compile_options($<$<CONFIG:RELWITHLABELS>:-fdata-sections>)
			add_compile_options($<$<CONFIG:RELWITHLABELS>:-ffunction-sections>)
		elseif (MSVC)
			# /Gy is splitting functions into different sections
			message(STATUS "forcing split function sections for release builds")
			add_compile_options($<$<CONFIG:RELEASE>:/Gy>)
			add_compile_options($<$<CONFIG:RELWITHLABELS>:/Gy>)
		endif()
	endif()

	message(STATUS "${PROJECT_NAME} C++ compile flags for RelWithLabels  build : ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELWITHLABELS}")
	message(STATUS "${PROJECT_NAME} C++ compile flags for Release        build : ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}")
	message(STATUS "${PROJECT_NAME} C++ compile flags for Debug          build : ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}")

	get_property(MY_COPTS DIRECTORY PROPERTY COMPILE_OPTIONS)
	string(REPLACE "$<$<COMPILE_LANGUAGE:CXX>:" "" MY_COPTS "${MY_COPTS}")
	if (NOT CMAKE_BUILD_TYPE STREQUAL "Debug" AND NOT CMAKE_BUILD_TYPE STREQUAL "debug")
		string(REPLACE "$<$<CONFIG:DEBUG>:-Werror>" "" MY_COPTS "${MY_COPTS}")
	endif()
	string(REPLACE "$<$<CONFIG:DEBUG>:" "" MY_COPTS "${MY_COPTS}")
	string(REPLACE "$<$<CONFIG:RELEASE>:" "" MY_COPTS "${MY_COPTS}")
	string(REPLACE ";" " " MY_COPTS "${MY_COPTS}")
	string(REPLACE ">" "" MY_COPTS "${MY_COPTS}")
	message(STATUS "${PROJECT_NAME} additional compile flags : ${MY_COPTS}")

endif()
