#! /bin/bash

#%
#% kscan - scan a LAN to produce a simple inventory and warn of new devices
#%
#% usage: kscan lan|<N.N.N>   :: will scan N.N.N.1 -> N.N.N.255
#%
#% note:
#%   * requires NMAP
#%   * run as root (recommended)
#%   * kscan takes more time when it find more devices on a LAN
#%

if [[ ${1} = -x ]]; then
	shift
	set -x
fi

setx=_GetIP
#==============================
_GetIP ()
#==============================
{
	export PATH="/sbin:${PATH}"

	if [[ $# -eq 2 ]]; then
		local nic=$1
		(ifconfig | grep -A 8 "${nic}" | sed -e 's/.*inet addr:/inet /' | awk '($1 == "inet") {print $2; exit 0}') 2>/dev/null
	elif [[ "$1" != "" ]]; then
		local nic=$1
		(ifconfig $nic | sed -e 's/.*inet addr:/inet /' | awk '($1 == "inet") {print $2; exit 0}') 2>/dev/null
	else
		#ifconfig | sed -e 's/.*inet addr:/inet /' | awk '($1 == "inet") {print $2; exit 0}' # <-- pick first interface

		# inet 10.10.178.34 netmask 0xffffff00 broadcast 10.10.178.255
		ifconfig | awk '/[\t ]inet .* broadcast / { print $2 }' | tail -1 # <-- pick the last interface that has a broadcast
	fi

} # _GetIP

#==============================
MyIP ()
#==============================
{
	#ip=$(_GetIP eth0);   [[ "$ip"   != "" ]] && echo "$ip" && exit 0
	#ip=$(_GetIP ens160); [[ "$ip"   != "" ]] && echo "$ip" && exit 0
	#ip=$(_GetIP ens32);  [[ "$ip"   != "" ]] && echo "$ip" && exit 0
	#ip=$(_GetIP en any); [[ "$ip"   != "" ]] && echo "$ip" && exit 0
	ip=$(_GetIP)

	echo ${ip}

} # MyIP

setx=MyLAN
#==============================
MyLAN ()
#==============================
{
	local ipv4="$1"
	echo ${ipv4} | awk -F. '{printf ("%s.%s.%s\n", $1, $2, $3)}'

} # MyLAN

setx=Report
#==============================
Report ()
#==============================
{
	local myip="${1}"
	local BAR="--------------------------------------------------"
	local devices="/dev/null"

	if [[ -f ${0}.devices ]]; then
		devices="${0}.devices"
	elif [[ -f /etc/devices ]]; then
		devices="/etc/devices"
	fi

	if [[ ${devices} != "/dev/null" ]]; then
		echo ":: reading known devices from: ${devices}"
	fi

	printf "+-%5.5s-+-%-18.18s+-%-30.30s+-%-45.45s+\n" $BAR $BAR $BAR $BAR
	printf "| %5.5s | %-18.18s| %-30.30s| %-45.45s|\n" IP DEVICE BRAND OPEN-PORTS
	printf "+-%5.5s-+-%-18.18s+-%-30.30s+-%-45.45s+\n" $BAR $BAR $BAR $BAR

	local results=$(sed -e 's,[()\/], ,g' | awk -v "myip=$myip" -v "devicefile=${devices}" 'BEGIN {
		while (getline < devicefile)
		{
			split ($0,fields,"=")
			devices[fields[1]] = fields[2]
		}
		close (devicefile)
	}
	/^Nmap scan report for / {
		ip = $NF
		my = (ip == myip) ? "*" : " "
		ports = ""
		do
		{
			if ((0 + $1) > 0)
			{
				ports = sprintf ("%s%s%d", ports, (ports=="") ? "" : " ", $1)
			}
			else if ($0 ~ /^MAC Address/)
			{
				mac = $3
				brand = ""
				for (ii=4; ii<=NF; ++ii)
				{
					brand = sprintf ("%s%s%s", brand, (brand=="") ? "" : " ", $ii)
				}
			}
			if (!NF) {
				break # do..while
			}
		} while (getline)

		#printf ("DEBUG: mac: %s, ip: %s%s, brand: %s, ports: %s\n", mac, ip, my, brand, ports)
		split(ip,arr,".")
		last=arr[4]
		
		device = mac
		if (devices[mac])
		{
			device = devices[mac]
		}

		printf ("| .%03d%s | %-18.18s| %-30.30s| %-45.45s|\n", last, my, device, brand, ports)

	}' | sort -n)

	echo "$results"
	printf "+-%5.5s-+-%-18.18s+-%-30.30s+-%-45.45s+\n" $BAR $BAR $BAR $BAR

	local count=$(echo "$results" | wc -l)
	printf ":: %d devices found, * is this device.\n" $count

} # Report

setx=MAIN
#====================
# MAIN
#====================
if [[ $# -lt 1 ]]; then
	awk '/^#%/ {print substr($0,3)}' $0
	exit 1
fi

nmap --version > /dev/null 2>&1
if [[ $? -ne 0 ]]; then
	echo ">> you must install nmap"
	exit 1
fi

if [[ $(whoami) != root ]]; then
	echo ":: re-running as root, not $(whoami) ..."
	sudo $0 "$@"
	exit $?
fi

ip=$(MyIP)

while [[ $# -gt 0 ]]
do
	lan="$1"
	case ${lan} in
	*.*.*)
		# continue
		;;
	lan)
		echo ":: my ip: ${ip}"
		lan=$(MyLAN ${ip})
		;;
	*)
		echo ">> invalid network spec: ${lan}"
		exit 1
		;;
	esac

	echo ":: scanning subnet ${lan}.1 --> ${lan}.255 ..."
	raw=$(nmap ${lan}.0/24)
	echo "$raw" | Report ${ip}

	#echo "$raw" > /tmp/nmap
	#echo ":: raw nmap written to: /tmp/nmap"

	shift
done
