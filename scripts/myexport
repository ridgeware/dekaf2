#! /bin/bash

#%
#% myexport - export an entire INSTANCE of mysql/mariadb (all dbs, all tables), multiplexed
#%
#% usage: myexport [-threads <N>] [-pipe '<cmd>'] [<dumpfolder>] -u<rootuser> -p<rootpass> [-h<hostname>]
#%
#% where:
#%   -threads <N>   :: override the default of 12 threads
#%   -pipe '<cmd>'  :: instead of creating SQL files, pipe all exports into an instance immediately
#%                     e.g. myexport -pipe 'mysql -uroot -p...' /dev/null -u...
#%   <dumpfolder>   :: folder to hold result (required if not using -pipe)
##   -database <db> :: [undocumented xargs callback] prepare this database only
#%
#% history:
#%   2024-05 : keef created
#%

if [[ ${1} = -x ]]; then
	shift
	set -x
fi

database=""
iThreads=12
pipe=""
dumpfolder=""
myargs=""

while [[ $# -gt 0 ]]
do
	case ${1} in
	-database)
		database="$2"
		shift
		;;
	-threads)
		iThreads=$2
		shift
		;;
	-pipe)
		pipe="${2}"
		shift
		;;
	-u|-p|-h)
		myargs="${myargs} ${1} ${2}"
		shift
		;;
	-u*|-p*|-h*)
		myargs="${myargs} ${1}"
		;;
	-*)
		echo ">> unknown option: ${1}"
		exit 1
		;;
	*)
		if [[ -z ${dumpfolder} ]]; then
			dumpfolder="${1}"
		else
			echo ">> dumpfolder '${1}' was already specified as '${dumpfolder}'"
			exit 1
		fi
		;;
	esac
	shift
done

if [[ -z ${pipe} ]] && [[ -z ${dumpfolder} ]]; then
	awk '/^#%/ {print substr($0,3)}' $0
	exit 1
elif [[ -z ${myargs} ]]; then
	awk '/^#%/ {print substr($0,3)}' $0
	exit 1
fi

if [[ -n ${pipe} ]] && [[ -n ${dumpfolder} ]] && [[ ${dumpfolder} != /dev/null ]]; then
	echo ">> warning: dumpfolder '${dumpfolder}' will be ignored because we are piping to: ${pipe}"
	dumpfolder=""
fi

if [[ -z "${database}" ]]; then
	#==============================
	# MAIN LOGIC
	#==============================
	if [[ -n ${dumpfolder} ]]; then
		contents=$(ls -1 ${dumpfolder})
		if [[ -f ${dumpfolder}/.done ]]; then
			echo ":: looks like export is already done: ${dumpfolder}"
			exit 0
		elif [[ "${contents}" != "" ]]; then
			echo ">> dumpfolder already exists: ${dumpfolder}"
			exit 1
		fi
	fi

	if [[ -n ${dumpfolder} ]]; then
		mkdir -p ${dumpfolder} || exit 1
	fi

	dblist=$(mysql ${myargs} -NAB -e "show databases" | grep -vE '^(performance_schema|sys|information_schema|mysql)$')
	if [[ $? -ne 0 ]]; then
		echo ">> mysqlargs failed: ${myargs}"
		exit 1
	fi

	# - - - - - - - - - - - - - - - - - - - - - - - - -
	# spawn for each databases:
	# - - - - - - - - - - - - - - - - - - - - - - - - -
	echo ":: $(date '+%a %T') : sizing up each database in the instance ..."
	if [[ -z ${pipe} ]]; then
		(echo _SYSTEM; echo "${dblist}") | xargs -n 1 -P 8 -I '{}' ${0} -database '{}' ${dumpfolder} ${myargs}
	else
		(echo _SYSTEM; echo "${dblist}") | xargs -n 1 -P 8 -I '{}' ${0} -pipe "${pipe}" -database '{}' ${myargs}
	fi
	exit $?

elif [[ ${database} = _SYSTEM ]]; then

	#=====================================
	# SYSTEM INFO (callback via xargs)
	#=====================================
	if [[ -z ${pipe} ]]; then
		redirect="> ${dumpfolder}/_SYSTEM.sql"
	else
		redirect="| ${pipe}"
	fi

	echo ":: $(date '+%a %T') : system: dumping system info ..."
	cmd="mysqldump --lock-tables=false ${myargs} --system=users | grep -vE '(mariadb[.]sys|mysql[.]sys|rdsadmin|rdsrepladmin|proxysql)' ${redirect}"
	echo ":: $(date '+%a %T') : system: ${cmd}"
	eval "$cmd"
	echo ":: $(date '+%a %T') : system: done."

else # ${database} is set

	#=====================================
	# ONE DATABASE (callback via xargs)
	#=====================================
	rm -f ${dumpfolder}/.db_${database}
	tablelist=$(mysql ${myargs} ${database} -NAB -e "show tables")
	if [[ $? -ne 0 ]]; then
		echo ">> $(date '+%a %T') : ${database}: skipping database."
		exit 0
	fi

	if [[ -z ${pipe} ]]; then
		redirect="> ${dumpfolder}/${database}.sql"
	else
		redirect="| ${pipe}"
	fi

	echo ":: $(date '+%a %T') : ${database}: dumping database ..."
	cmd="mysqldump --lock-tables=false ${myargs} --databases ${database} ${redirect}"
	echo ":: $(date '+%a %T') : ${database}: ${cmd}"
	eval "$cmd"
	echo ":: $(date '+%a %T') : ${database}: done."

fi

