#! /bin/bash

#%
#% myexport - export an entire INSTANCE of mysql/mariadb (all dbs, all tables), multiplexed
#%
#% usage: myexport [-threads <N>] <dumpfolder> -u<rootuser> -p<rootpass> [-h<hostname>]
#%
#% where:
##   -database <db> :: [undocumented xargs callback] prepare this database only
##   -table <name>  :: [undocumented xargs callback] dump this table only
#%   -threads <N>   :: override the default of 12 threads
#%
#% history:
#%   2024-05 : keef created
#%

if [[ ${1} = -x ]]; then
	shift
	set -x
fi

database=""
if [[ ${1} = "-database" ]]; then
	database=$2
	shift 2
fi

table=""
if [[ ${1} = "-table" ]]; then
	table=$2
	shift 2
fi

iThreads=12
if [[ ${1} = "-threads" ]]; then
	iThreads=$2
	shift 2
fi

if [[ $# -eq 0 ]]; then
	awk '/^#%/ {print substr($0,3)}' $0
	exit 1
fi

dumpfolder="$1"; shift
myargs="$@"

if [[ -z "${table}" ]] && [[ -z "${database}" ]]; then
	#==============================
	# MAIN LOGIC
	#==============================
	if [[ -d ${dumpfolder} ]]; then
		contents=$(ls -1 ${dumpfolder})
		if [[ -f ${dumpfolder}/.done ]]; then
			echo ":: looks like export is already done: ${dumpfolder}"
			exit 0
		elif [[ "${contents}" != "" ]]; then
			echo ">> dumpfolder already exists: ${dumpfolder}"
			exit 1
		fi
	fi

	mkdir -p ${dumpfolder} || exit 1

	dblist=$(mysql ${myargs} -NAB -e "show databases" | grep -vE '^(performance_schema|sys|information_schema|mysql)$')
	if [[ $? -ne 0 ]]; then
		echo ">> mysqlargs failed: ${myargs}"
		exit 1
	fi

	# - - - - - - - - - - - - - - - - - - - - - - - - -
	# spawn for databases:
	# - - - - - - - - - - - - - - - - - - - - - - - - -
	echo ":: $(date '+%a %T') : sizing up each database in the instance ..."
	echo "${dblist}" | xargs -n 1 -P 8 -I '{}' ${0} -database '{}' ${dumpfolder} ${myargs}

	echo ":: $(date '+%a %T') : dumping instance using ${iThreads} threads ..."

	# - - - - - - - - - - - - - - - - - - - - - - - - -
	# spawn for tables:
	# - - - - - - - - - - - - - - - - - - - - - - - - -
	(echo _SYSTEM; cat ${dumpfolder}/.db_*) | xargs -n 1 -P 8 -I '{}' ${0} -table '{}' ${dumpfolder} ${myargs}

	# give a nice summary:
	iNumFiles=$(ls -1 ${dumpfolder} | wc -l | awk '{printf "%d", $1}')
	size=$(du -sh ${dumpfolder} | awk '{print $1}')
	touch ${dumpfolder}/.done
	echo ":: $(date '+%a %T') : done: ${iNumFiles} files, ${size}"

	exit 0

elif [[ ! -z ${database} ]]; then

	#echo ":: $(date '+%a %T') : preparing database ${database} ..."
	rm -f ${dumpfolder}/.db_${database}
	tablelist=$(mysql ${myargs} ${database} -NAB -e "show tables")
	if [[ $? -ne 0 ]]; then
		echo ">> $(date '+%a %T') : skipping database ${database}."
	else
		for table in ${tablelist}
		do
			echo "${db}.${table}" >> ${dumpfolder}/.db_${database}
		done
	fi

elif [[ ${table} = _SYSTEM ]]; then

	#=====================================
	# SYSTEM TABLES (callback via xargs)
	#=====================================
	cmd="mysqldump --lock-tables=false ${myargs} --system=users | grep -vE '(mariadb[.]sys|mysql[.]sys|rdsadmin|rdsrepladmin|proxysql)' > ${dumpfolder}/_SYSTEM.sql"
	#echo ":: $(date '+%a %T') : ${cmd}"
	eval "$cmd"

else # an actual table

	#=====================================
	# SINGLE TABLES (callback via xargs)
	#=====================================
	db=$(echo ${table} | awk -F. '{print $1}')
	tab=$(echo ${table} | awk -F. '{print $2}')

	rm -f ${dumpfolder}/${table}.sql
	if [[ 1 -eq 1 ]]; then
		cat <<-EOF > ${dumpfolder}/${table}.sql
		/*
		** created by: ${0}
		** created on: $(date '+%a %Y-%m-%d %H:%M')
		**  source db: ${db}
		**   hostname: $(hostname)
		*/
		
		create database if not exists ${db};
		use ${db};
		
		EOF
	else
		echo "/*" >> ${dumpfolder}/${table}.sql
		echo "** created by: ${0}" >> ${dumpfolder}/${table}.sql
		echo "** created on: $(date '+%a %Y-%m-%d %H:%M')" >> ${dumpfolder}/${table}.sql
		echo "**  source db: ${db}" >> ${dumpfolder}/${table}.sql
		echo "**   hostname: $(hostname)" >> ${dumpfolder}/${table}.sql
		echo "*/" >> ${dumpfolder}/${table}.sql
		echo "" >> ${dumpfolder}/${table}.sql
		echo "create database if not exists ${db};" >> ${dumpfolder}/${table}.sql
		echo "use ${db};" >> ${dumpfolder}/${table}.sql
		echo "" >> ${dumpfolder}/${table}.sql
	fi

	mysqldump --lock-tables=false ${myargs} --databases ${db} --tables ${tab} >> ${dumpfolder}/${table}.sql
fi

