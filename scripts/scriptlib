#! /bin/bash

# scriptlib - common functions for other scripts
# source from other scripts

setx=Synopsis
#==================
Synopsis ()
#==================
{
	[[ -f "${1}" ]] && fname="${1}" || fname="${ME_FULLPATH}"

	[[ -f "${fname}" ]] && awk '/^#%/ {print substr($0,3)}' "${fname}" || echo ":: synopsis file '${fname}' not found"

	exit 1

} # Synopsis

setx=SetupColors
#==============================
SetupColors ()
#==============================
{
	# Note, coloring possibility is tested for stderr and thus should not be used for stdout
	if test -t 2 && which tput >/dev/null 2>&1; then
		ncolors=$(tput colors)
		if test -n "$ncolors"; then
			xWarnColor=$((tput setf 6 || tput setaf 3) && (tput setb 0 || tput setab 0)) # yellow on black
			xErrorColor=$((tput setf 7 || tput setaf 7) && (tput setb 4 || tput setab 1)) # white on red
			xResetColor=$(tput sgr0)
		fi
	fi

} # SetupColors

setx=Info
#==================
Info ()
#==================
{
	# All input args are interpreted as info text to display

	echo ":: ${ME}: ${*}"

} # Info

setx=Warn
#==================
Warn ()
#==================
{
	# All input args are interpreted as error text to display

	echo "${xWarnColor}>> ${ME}: WARNING: ${*:-unspecified}${xResetColor}" >&2

} # Warn

setx=Error
#==================
Error ()
#==================
{
	# All input args are interpreted as error text to display

	echo "${xErrorColor}>> ${ME}: ERROR: ${*:-unspecified}${xResetColor}" >&2

} # Error

setx=Die
#==================
Die ()
#==================
{
	# All input args are interpreted as error text to display

	local sMessage="${FUNCNAME[1]}: ${*}"
	[[ ${BASH_SUBSHELL} -eq 0 ]] && sMessage="${sMessage}. Aborting"
	Error "${sMessage}"

	exit 1

} # Die

setx=InstallOptionalSystemPackages
#==============================
InstallOptionalSystemPackages ()
#==============================
{
	while [[ $# -gt 0 ]]; do
		if ! IsSystemPackageInstalled "${1}"; then
			Info "installing missing ${BINDIR} package '${1}' ..."
			${INSTALL} "${1}" || Info "could not install package '${1}'"
		fi
		shift
	done

} # InstallOptionalSystemPackages

setx=InstallSystemPackages
#==============================
InstallSystemPackages ()
#==============================
{
	while [[ $# -gt 0 ]]; do
		if ! IsSystemPackageInstalled "${1}"; then
			Info "installing missing ${BINDIR} package '${1}' ..."
			${INSTALL} "${1}" || Die "could not install package '${1}'"
		fi
		shift
	done

} # InstallSystemPackages

setx=IsSystemPackageInstalled
#==============================
IsSystemPackageInstalled ()
#==============================
{
	[[ $# -eq 1 ]] || Die "script error: expected one argument, $# provided: $@"
	case "${DISTRIB}" in
		darwin)
			[[ "$(brew list --formula | grep ${1})" != "" ]]
			;;
		debian)
			[[ "$(dpkg -l $1 | grep '^ii')" != "" ]]
			;;
		*)
			${CHECKINSTALLED} "$1" &> /dev/null 2>&1
			;;
	esac

} # IsSystemPackageInstalled

setx=RemoveSystemPackages
#==============================
RemoveSystemPackages ()
#==============================
{
	while [[ $# -gt 0 ]]; do
		if IsSystemPackageInstalled "${1}"; then
			Info "removing ${BINDIR} package '${1}' ..."
			${UNINSTALL} "${1}" || Die "could not remove package '${1}'"
		fi
		shift
	done

} # RemoveSystemPackages

setx=CheckInstallBrew
#==============================
CheckInstallBrew ()
#==============================
{
	local HasBrew=$(which brew)

	if [[ "$HasBrew" == "" ]]; then

		echo "The homebrew packet manager seems not to be installed.\nDo you want to install it now? (Y/n)"
		read -n 1 Ch
		if [ "$Ch" == "n" ]; then
			Die "need homebrew to run installs"
		fi

		/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

		HasBrew=$(which brew)

		if [[ "$HasBrew" == "" ]]; then
			Die "failed to install homebrew"
		fi
	fi

} # CheckInstallBrew

setx=GetOS
#==================
GetOS ()
#==================
{
	# upon successful completion we will have the following global variables set:
	#
	# INSTALLER      : yum, apt-get, brew
	# INSTALL        : sudo yum install -y, brew install
	# UNINSTALL      : sudo yum remove -y, brew uninstall
	# CHECKINSTALLED : sudo yum list installed, brew list
	# STARTSERVICE   : sudo systemctl start, brew services start
	# STOPSERVICE    : sudo systemctl stop, brew services stop
	# ARCH           : uname -m (X86_64, armv7l, ...)
	# OS             : uname -s (Linux, Darwin, ...)
	# DISTRIB        : darwin, debian, redhat, centos, fedora, aws
	# DVERSION       : 6, 7, 8, 9 ..
	# BINDIR         : redhat64v7, centos64v7, debian-armv7l, darwin-X86_64, fedora64v28, ...
	# DEVPKG         : suffix for developer packages (-dev, -devel, empty (for brew))
	# SETMODERNCC    : either empty, or for some environments a env setup for newer compilers
	#                  (like "env CC=gcc10-gcc CXX=gcc10-g++" )

	NOSUDO="$1"
	if [[ "${NOSUDO}" != "nosudo" ]]; then
		local SUDO=sudo; [[ ! -z ${CODEBUILD_BUILD_IMAGE} ]] && SUDO=""
	fi
	INSTALLER="yum"
	INSTALL="${SUDO} yum install -y"
	UNINSTALL="${SUDO} yum remove -y"
	CHECKINSTALLED="${SUDO} yum list installed"
	STARTSERVICE="${SUDO} systemctl start"
	STOPSERVICE="${SUDO} systemctl stop"
	ARCH=$(uname -m)
	OS=$(uname -s)
	DEVPKG="-devel"

	if [[ "${OS}" == "Darwin" ]]; then

		CheckInstallBrew

		BINDIR="darwin-${ARCH}"
		INSTALLER="brew"
		INSTALL="${INSTALLER} install"
		UNINSTALL="${INSTALLER} uninstall"
		CHECKINSTALLED="${INSTALLER} list | grep"
		STARTSERVICE="brew services start"
		STOPSERVICE="brew services stop"
		DISTRIB="darwin"
		DVERSION="$(sw_vers -ProductVersion) | tr '.' ' ' | awk '{printf ("%d", $1)}'"
		DEVPKG=""

	elif [[ "${OS}" == "Linux" ]]; then

		local fAmazon=0

		# get the linux release information
		if [[ -f /etc/system-release-cpe ]]; then
			grep amazon /etc/system-release-cpe > /dev/null && fAmazon=1
		fi

		if [[ -f /etc/debian_version ]]; then

			INSTALLER="apt-get"
			INSTALL="${SUDO} ${INSTALLER} install -y"
			UNINSTALL="${SUDO} ${INSTALLER} remove -y"
			CHECKINSTALLED="dpkg -l"
			DISTRIB="debian"
			DVERSION="$(cat /etc/debian_version 2>/dev/null | tr '.' ' ' | awk '{print $1}')"
			DEVPKG="-dev"

			if [[ "$(grep ^ID=ubuntu$ /etc/os-release)" != "" ]]; then
				# ubuntu debian..
				BINDIR="ubuntu-${ARCH}"
			else
				# another debian
				BINDIR="debian-${ARCH}"
			fi

		# is this a red hat release
		elif [[ -f /etc/redhat-release ]]; then

			# which derivate is this?
			local derivate="$(cat /etc/redhat-release 2>/dev/null | tr '.' ' ' | awk '{print $1}')"

			if [[ "$derivate" == "Fedora" ]]; then
				DISTRIB="fedora"
				DVERSION="$(cat /etc/redhat-release 2>/dev/null | awk '{print $3}')"
				BINDIR="${DISTRIB}64v${DVERSION}"
			elif [[ "$derivate" == "CentOS" ]]; then
				DISTRIB="centos"
				DVERSION="$(cat /etc/redhat-release 2>/dev/null | tr '.' ' ' | awk '{print $4}')"
				BINDIR="${DISTRIB}64v${DVERSION}"
			elif [[ "$derivate" == "Rocky" ]]; then
				DISTRIB="rockylinux"
				DVERSION="$(cat /etc/redhat-release 2>/dev/null | tr '.' ' ' | awk '{print $4}')"
				BINDIR="redhat64v${DVERSION}"
			else
				DISTRIB="redhat"
				DVERSION="$(cat /etc/redhat-release 2>/dev/null | tr '.' ' ' | awk '{print $7}')"
				# RHEL 5 gets special handling
				if [[ "${DVERSION}" -eq 5 ]]; then
					BINDIR="${DISTRIB}64"
				else
					BINDIR="${DISTRIB}64v${DVERSION}"
				fi
			fi

		elif [[ ${fAmazon} -ne 0 ]]; then

			DVERSION=$(cat /etc/system-release-cpe | sed -r 's,cpe:.*:amazon:.*linux:,,g' | sed -r 's,:ga,,g')
			local sRelease=$(grep -Po '(?<=cpe:2.3:o:amazon:amazon_linux:).+' /etc/system-release-cpe)
			if [[ ${sRelease} != "" ]]; then
				local sMajorRevision=${sRelease}
				BINDIR="aarmv${sMajorRevision}"
				DISTRIB="amazon"
				SETMODERNCC="env CC=clang CXX=clang++"
			else
				local sMajorRevision=$(grep -Po '(?<=cpe:/o:amazon:linux:).+(?=:ga)' /etc/system-release-cpe)
				BINDIR="aws64v${sMajorRevision}"
				DISTRIB="amazon"
			fi

		fi

	fi

	[[ "${BINDIR}" == "" ]] && Die "could not determine type of system"

#	Info "${BINDIR} ${ARCH} on ${DISTRIB} using ${INSTALLER} as install tool"

} # GetOS
